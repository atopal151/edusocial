import 'package:edusocial/services/comment_services.dart';
import 'package:edusocial/services/socket_services.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../models/comment_model.dart';

class CommentController extends GetxController {
  var commentList = <CommentModel>[].obs;
  var isLoading = false.obs;
  
  // Socket servisi
  late SocketService _socketService;

  @override
  void onInit() {
    super.onInit();
    _socketService = Get.find<SocketService>();
  }

  Future<void> fetchComments(String postId) async {
    try {
      isLoading.value = true;
      debugPrint('üîÑ Yorumlar y√ºkleniyor... Post ID: $postId');
      
      final comments = await CommentService.fetchComments(postId);
      commentList.assignAll(comments);
      
      debugPrint('‚úÖ ${comments.length} yorum y√ºklendi');
    } catch (e) {
      debugPrint('‚ùå Yorumlar y√ºklenirken hata: $e');
      commentList.clear();
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> addComment(String postId, String content) async {
    isLoading.value = true;
    
    try {
      debugPrint('üîÑ Yorum ekleniyor... Post ID: $postId');
      final newComment = await CommentService.postComment(postId, content);
      
      if (newComment != null) {
        debugPrint('‚úÖ Yorum ba≈üarƒ±yla eklendi');
        
        // Socket'e yorum bildirimi g√∂nder
        _sendCommentNotification(postId, content);
        
        // Yorumlarƒ± yeniden y√ºkle
        await fetchComments(postId);
      } else {
        debugPrint('‚ùå Yorum eklenemedi');
        Get.snackbar("Hata", "Yorum eklenemedi");
      }
    } catch (e) {
      debugPrint('‚ùå Yorum eklenirken hata: $e');
      Get.snackbar("Hata", "Yorum eklenirken bir hata olu≈ütu");
    } finally {
      isLoading.value = false;
    }
  }

  /// Socket'e yorum bildirimi g√∂nder
  void _sendCommentNotification(String postId, String content) {
    try {
      debugPrint('üì§ Socket\'e yorum bildirimi g√∂nderiliyor...');
      
      final notificationData = {
        'type': 'post_comment',
        'post_id': postId,
        'content': content,
        'timestamp': DateTime.now().toIso8601String(),
        'message': 'Post\'unuza yeni yorum geldi',
      };
      
      // Farklƒ± event isimlerini dene
      _socketService.sendMessage('post:comment', notificationData);
      _socketService.sendMessage('comment:new', notificationData);
      _socketService.sendMessage('post:activity', notificationData);
      
      debugPrint('‚úÖ Yorum bildirimi socket\'e g√∂nderildi');
    } catch (e) {
      debugPrint('‚ùå Socket bildirimi g√∂nderilemedi: $e');
    }
  }
}
